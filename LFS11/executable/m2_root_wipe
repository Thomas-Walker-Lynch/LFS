#!/bin/bash
# This might require sudo_LFS depending on the stage in the build that it is run at.
# This is dangerous. This is the kind of thing that causes a person to use an emulated m1 machine.
set -x
set -e

if [[ -z "$M2_ROOT" ]];then
  echo $0 " requires that \$M2_ROOT has a value"
  exit 1
fi

# run m2_wipe as root so that umount will work and rm of files works even when the files are owned by root
# this is an excellent script for wiping your host computer by accident!
if [ "$EUID" -ne 0 ]; then
  echo $0 "not being run as root, so can't do unounts, we stop scanning upon reaching the first error"
fi

read -p "Remove all files except package/ on $M2_ROOT? [y|n]:" -n 1 -r
echo    # (optional) move to a new line
if [[ ! "$REPLY" =~ ^[y]$ ]];then
  exit 1
fi

umount /mnt/LFS11 ..  now we don't need to exclude the package and patches dirs though, man
miss this step and watch everything else get deleted, probably want to exclude it also just
in case the umount does not work ..



# Rumor is that 'find' does a depth first scan, so it should unmount things in the correct order even
# when mounts are nested.
test "$EUID" -eq 0 && \
  find "$M2_ROOT" \
    -mindepth 1 \
    ! -name 'package' ! -name 'patch' \
    -type d \
    -exec umount {} >& /dev/null '&&' echo "on final scan unmounted:" {} \;


# Find just bludgons forward causing hundreds of rm {} 'can't delete due to permission' errors when m2_wipe
# is invoked after the m2 directory tree has been chown to root.  So to instead make it stop on the first error:
#
# set -e did not cause find to bail on the first rm permisison error.
# Terminating with a '+' instead of '\;' did not stop find, though this was a Stack Exchange solution.
# Piping into  xargs instead of using -exec did not stop find and rm from spewing hundreds of no permission errors,
# though this solution was suggested by many people.
# The following syntax causes it to stop on the first error, but apparently not all versions of unix find have a -quit.
# for testing:
#
echo "rm -rf the following:"
find "$M2_ROOT" \
  -maxdepth 1 -mindepth 1 \
  ! -name 'package' ! -name 'patch' \
  -print \
  \( -exec rm -rf {} \; -o -quit \)

chown "$USERNAME":"$USERNAME" "$M2_ROOT"
chmod 0755 "$M2_ROOT"

set +x
