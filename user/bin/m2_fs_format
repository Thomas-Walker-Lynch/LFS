#!/bin/bash
#
#  This script must be sourced, because it sets UUID an possibly NODE environment variables.
#
#  If given a device argument that is used.  Otherwise LUS_M2_EFI_NODE and LUS_FS_NODE are used.
#
# After F36 automounts a device plugged in, mountpoint still says that it is not mounted, but other commands act like
# it is mounted. I tested this twice because it is so surprising.  What a mess, hence the extra umount command after the
# mountpoint test.
#
# Generally not a good idea to rely upon communicationt through the file system, better to
# source this and let it update the environment.

sourced=true
if ! (return 0 2>/dev/null); then
  echo consider sourcing $(basename "$0") so that it can modify the current evironment
  sourced=false
fi

err=false
if [[ "$LUS_ENV" != "m1_root" ]];then
  echo must be run in env_m1_root
  err=true
fi

$err && ($sourced && return 1 || exit 1)

derived_from_device=false
if [[ ! -z "$1" ]];then
  derived_from_device=true

  ! test -z "$LUS_M2_EFI_NODE" && umount $LUS_M2_EFI_NODE
  ! test -z "$LUS_M2_FS_NODE" && umount $LUS_M2_FS_NODE

  LUS_M2_DEVICE_NODE=$1
  LUS_M2_EFI_NODE="$LUS_M2_DEVICE_NODE"1
  LUS_M2_SWAP_NODE="$LUS_M2_DEVICE_NODE"2
  LUS_M2_FS_NODE="$LUS_M2_DEVICE_NODE"3
  echo LUS_M2_DEVICE_NODE passed in as: $LUS_M2_DEVICE_NODE
  echo setting LUS_M2_EFI_NODE to: $LUS_M2_EFI_NODE
  echo setting LUS_M2_SWAP_NODE to: $LUS_M2_SWAP_NODE
  echo setting LUS_M2_FS_NODE to: $LUS_M2_FS_NODE
fi

if ! m2_fs_unmount; then
  echo no formatting done due to mounted partitions
  $err && ($sourced && return 1 || exit 1)
fi

mkfs.ext4 $LUS_M2_FS_NODE
err_mkm2fs=$?

mkfs.msdos $LUS_M2_EFI_NODE
err_mkfsefi=$?

# mount $LUS_M2_FS_NODE then initialize its selinx labels, unmount it
err_test_umount=0
err_sel_label=0
if $LUS_M2_SELINUX && test $err_mkm2fs -eq 0 && test $err_mkfsefi -eq 0;then
  pushd /mnt >& /dev/null
  if tmp_mnt=$(mktemp -d --tmpdir=/mnt);then
    if mount $LUS_M2_FS_NODE $tmp_mnt >& /dev/null && restorecon -R $tmp_mnt;then
      umount $LUS_M2_FS_NODE
      err_test_umount=$?
    fi
    rmdir "$tmp_mnt"
  else
    err_sel_label=1     
  fi
  popd >& /dev/null
fi

err=false
if test $err_mkm2fs -ne 0;then
  echo mkfs.ext4 LUS_M2_FS_NODE, $LUS_M2_FS_NODE, failed
  err=true
fi
if test $err_mkfsefi -ne 0;then
  echo mkfs.msdos LUS_M2_EFI_NODE, $LUS_M2_EFI_NODE, failed
  err=true
fi
if test $err_sel_label -ne 0;then
  echo could not set selinux labels for file system
  err=true
fi
if test $err_test_umount -ne 0;then
  echo umount of $tmp_mnt failed
  err=true
fi
$err && ($sourced && return 1 || exit 1)

LUS_M2_EFI_UUID=$(blkid -s UUID $LUS_M2_EFI_NODE | awk '{print $2}' | awk -F  '"' '{print $2}' )
LUS_M2_SWAP_PARTUUID=$(blkid -s PARTUUID $LUS_M2_SWAP_NODE | awk '{print $2}' | awk -F  '"' '{print $2}' )
LUS_M2_FS_UUID=$(blkid -s UUID $LUS_M2_FS_NODE | awk '{print $2}' | awk -F  '"' '{print $2}' )

echo new LUS_M2_EFI_UUID: $LUS_M2_EFI_UUID
echo LUS_M2_SWAP_PARTUUID: $LUS_M2_SWAP_PARTUUID
echo new LUS_M2_FS_UUID: $LUS_M2_FS_UUID

# updated UUID numbers for the configuration
cat > "$REPO_USER_DIR"/build/config_m2_UUID << EOF
export LUS_M2_EFI_UUID=$LUS_M2_EFI_UUID
export LUS_M2_SWAP_PARTUUID=$LUS_M2_SWAP_PARTUUID
export LUS_M2_FS_UUID=$LUS_M2_FS_UUID
EOF

$sourced && return 0 || exit 0
   
